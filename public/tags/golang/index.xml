<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Liam Blogs</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on Liam Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I. Concurrency and Parallelism In Golang And Python</title>
      <link>http://localhost:1313/programming-language/concurrency-and-parallelism-in-golang-and-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/programming-language/concurrency-and-parallelism-in-golang-and-python/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1-introduction&#34;&gt;1. Introduction&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--why-concurrency-and-parallelism-matter&#34;&gt;Why concurrency and parallelism matter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--key-differences-between-concurrency-and-parallelism&#34;&gt;Key differences between concurrency and parallelism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-concurrency-in-golang&#34;&gt;2. Concurrency in Golang&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--goroutines&#34;&gt;Goroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3-concurrency-in-python&#34;&gt;3. Concurrency in Python&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--threads&#34;&gt;Threads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--asyncio-concurrency-for-io-bound-work&#34;&gt;Asyncio: Concurrency for IO-bound Work&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-1&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4-parallelism-in-golang&#34;&gt;4. Parallelism in Golang&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#go-scheduler-the-g-m-p-model&#34;&gt;Go Scheduler: The G-M-P Model&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-2&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5-parallelism-in-python&#34;&gt;5. Parallelism in Python&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--the-gil-and-its-impact&#34;&gt;The GIL and Its Impact&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--multiprocessing-for-real-parallelism&#34;&gt;Multiprocessing for Real Parallelism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-3&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6-conclustion&#34;&gt;6. Conclustion&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h1&gt;&#xA;&lt;h2 id=&#34;--why-concurrency-and-parallelism-matter&#34;&gt;- Why concurrency and parallelism matter:&lt;/h2&gt;&#xA;&lt;p&gt;Modern software isn’t just about doing one thing at a time. From high-traffic web servers and real-time analytics, to background processing and automation, today’s applications often need to handle multiple tasks “at once.” Whether it’s serving thousands of user requests, processing large datasets, or running background jobs, your program’s ability to efficiently juggle several operations can be the difference between fast, scalable software and a sluggish, unresponsive system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>II. Mastering TCP and UDP in Golang</title>
      <link>http://localhost:1313/programming-language/mastering-tcp-udp-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/programming-language/mastering-tcp-udp-in-golang/</guid>
      <description>&lt;h1 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h1&gt;&#xA;&lt;h3 id=&#34;--why-understanding-networking-is-crucial-for-backend-developers&#34;&gt;- Why understanding networking is crucial for backend developers&lt;/h3&gt;&#xA;&lt;p&gt;In today’s connected world, backend developers are expected to build reliable, scalable, and high-performance systems. Whether you’re designing REST APIs, microservices, real-time chat apps, or distributed systems, a solid understanding of computer networking is essential. Knowing how data is transmitted, how connections are established, and what trade-offs exist between reliability and speed empowers you to make better architectural decisions and debug network issues effectively.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
