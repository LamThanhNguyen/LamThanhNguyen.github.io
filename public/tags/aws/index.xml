<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Liam Blogs</title>
    <link>http://localhost:1313/tags/aws/</link>
    <description>Recent content in Aws on Liam Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Jun 2025 10:58:08 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>II. Understanding Kubernetes Service Types &amp; Ingress</title>
      <link>http://localhost:1313/kubernetes/kubernetes-service-types-and-ingress/</link>
      <pubDate>Thu, 12 Jun 2025 10:58:08 -0400</pubDate>
      <guid>http://localhost:1313/kubernetes/kubernetes-service-types-and-ingress/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why exposing services matters in Kubernetes&lt;/strong&gt;: Your workloads are useless if no one can reach them. Service abstraction lets you decouple pod lifecycles from stable endpoints.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Overview of Service types vs. Ingress:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Services give every workload an IP; Ingress turns a set of Services into a coherent, externally reachable API surface.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-kubernetes-service-types-explained&#34;&gt;2. Kubernetes Service Types Explained&lt;/h2&gt;&#xA;&lt;h3 id=&#34;--a-clusterip&#34;&gt;- a. ClusterIP&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Exposes the Service on a cluster-internal IP&#xA;- Accessible **only inside** the cluster&#xA;- Typical use: &#xA;    - Internal-only services &#xA;    - Microservices talking to each other&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;--b-nodeport&#34;&gt;- b. NodePort&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Exposes the Service on each node’s IP at a static port (the NodePort)&#xA;- Accessible from outside the cluster: same VPC or the internet (depending on firewall/Security Group rules)&#xA;- Reachable via **NodeIP:NodePort** (port range 30000 - 32767)&#xA;- Typical use:&#xA;    - Simple setups, debugging, or in environments without cloud LBs. &#xA;    - Quick test or direct access, not recommended for production internet-facing apps.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;--c-loadbalancer&#34;&gt;- c. LoadBalancer&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Creates a cloud load balancer (cloud provider integration, e.g., AWS ALB).&#xA;- Assigns a public IP and routes traffic to your Service.&#xA;- Accessible from the internet.&#xA;- Typical use: exposing production workloads to the internet (websites, APIs).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;--d-externalname&#34;&gt;- d. ExternalName&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Maps the Service to an external DNS name.&#xA;- Used for routing cluster traffic to resources outside Kubernetes.&#xA;- Not used for exposing services to the internet.&#xA;- Typical use: referencing services outside the cluster by DNS name(database,SaaS endpoints).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;3-ingress&#34;&gt;3. Ingress&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ingress is a Kubernetes resource that manages external HTTP/HTTPS traffic&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Receives incoming requests from outside the cluster&lt;/li&gt;&#xA;&lt;li&gt;Routes them to the right Service based on rules (URL path, host, headers…)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Typical flow: User → ALB/NLB/NGINX (provisioned by the Ingress Controller) → Service → Pods.&lt;/li&gt;&#xA;&lt;li&gt;Ingress Controller:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A pod/deployment running inside your cluster&lt;/li&gt;&#xA;&lt;li&gt;monitors your Ingress resources.&lt;/li&gt;&#xA;&lt;li&gt;configures and manages actual routing rules on a cloud load balancer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ingress Class:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a way to specify which Ingress Controller is responsible for handling a particular Ingress resource&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-curious-question&#34;&gt;4. Curious question&lt;/h2&gt;&#xA;&lt;p&gt;Q: Why Do You Need Ingress?&#xA;A: Without Ingress, to expose multiple applications or services externally, you would need many individual LoadBalancer services, which becomes expensive and complex quickly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I. Auto build &amp; push Docker Image to AWS ECR with Github Actions</title>
      <link>http://localhost:1313/aws/ci-docker-to-aws-ecr-with-github-actions/</link>
      <pubDate>Tue, 10 Jun 2025 10:58:08 -0400</pubDate>
      <guid>http://localhost:1313/aws/ci-docker-to-aws-ecr-with-github-actions/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Automating the build and deployment of Docker images using GitHub Actions and AWS Elastic Container Registry (ECR) significantly streamlines your software delivery process.&lt;/p&gt;&#xA;&lt;p&gt;By integrating these powerful tools, developers benefit from reduced manual intervention, minimized errors, and accelerated deployment cycles.&lt;/p&gt;&#xA;&lt;p&gt;GitHub Actions automates your build workflow whenever code changes, while AWS ECR securely stores and manages your container images, ensuring reliability and scalability.&lt;/p&gt;&#xA;&lt;p&gt;In this guide, you&amp;rsquo;ll learn step-by-step how to effortlessly set up continuous integration and continuous deployment (CI/CD) to AWS ECR, maximizing your development efficiency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I. Install AWS CLI, kubectl, and eksctl</title>
      <link>http://localhost:1313/kubernetes/install-aws-kubectl-eksctl-on-ubuntu/</link>
      <pubDate>Sun, 08 Jun 2025 10:58:08 -0400</pubDate>
      <guid>http://localhost:1313/kubernetes/install-aws-kubectl-eksctl-on-ubuntu/</guid>
      <description>&lt;p&gt;Ubuntu 22.04.3 LTS - Windows Subsystem for Linux - AMD64&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-install--config-aws-cli&#34;&gt;1. Install &amp;amp; Config AWS CLI&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo snap install aws-cli --classic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which aws&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configure AWS account&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws configure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AWS Access Key ID &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: xxxxxxxxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AWS Secret Access Key &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: xxxxxxxxxxxxxxxx+xxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Default region name &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: ap-southeast-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Default output format &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can verify your aws account:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.aws/credentials&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.aws/config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 describe-vpcs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-install-kubectl-cli&#34;&gt;2. Install kubectl CLI&lt;/h2&gt;&#xA;&lt;p&gt;kubectl is the command-line interface (CLI) tool used to interact with Kubernetes clusters. It allows developers and operators to manage cluster resources, inspect states, deploy applications, and perform administrative tasks.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
