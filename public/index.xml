<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploring Tech: Liam&#39;s Journey on Liam Blogs</title>
    <link>https://lamthanhnguyen.github.io/</link>
    <description>Recent content in Exploring Tech: Liam&#39;s Journey on Liam Blogs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lamthanhnguyen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I. 12 Key Design Pattern In MongoDB With Real World Use Case</title>
      <link>https://lamthanhnguyen.github.io/database/12-key-design-pattern-in-mongodb-with-real-world-use-case/</link>
      <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/database/12-key-design-pattern-in-mongodb-with-real-world-use-case/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;MongoDB provides a variety of design patterns to help you model data efficiently for real-world use cases. Below are 12 key patterns every developer should know, each illustrated with practical examples.&lt;/p&gt;&#xA;&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1-attribute-pattern&#34;&gt;1. Attribute Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-computed-pattern&#34;&gt;2. Computed Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3-bucket-pattern&#34;&gt;3. Bucket Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4-schema-versioning-pattern&#34;&gt;4. Schema Versioning Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5-tree-pattern&#34;&gt;5. Tree Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6-subset-pattern&#34;&gt;6. Subset Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#7-approximation-pattern&#34;&gt;7. Approximation Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#8-outlier-pattern&#34;&gt;8. Outlier Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#9-polymorphic-pattern&#34;&gt;9. Polymorphic Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#10-extended-reference-pattern&#34;&gt;10. Extended Reference Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#11-pre-aggregation-pattern&#34;&gt;11. Pre-aggregation Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#12-document-versioning-pattern&#34;&gt;12. Document Versioning Pattern&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;1-attribute-pattern&#34;&gt;1. Attribute Pattern&lt;/h2&gt;&#xA;&lt;h3 id=&#34;scenario&#34;&gt;Scenario:&lt;/h3&gt;&#xA;&lt;p&gt;An online store has multiple product categories, such as smartphones, laptops, and clothing. Each category contains items with a wide range of attributes. For example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://lamthanhnguyen.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/about/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://lamthanhnguyen.github.io/images/image_about.webp&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;h4&gt;Exploring Tech: Liam&amp;#39;s Journey&lt;/h4&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Welcome to &lt;strong&gt;Exploring Tech: Liam&amp;rsquo;s Journey&lt;/strong&gt;—a space dedicated to my passion for technology, programming, and innovation. This blog is my digital canvas, where I share insights, projects, and experiences as I navigate the ever-evolving world of Artificial Intelligence, software development, and the latest tech trends.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-this-blog&#34;&gt;Why This Blog?&lt;/h3&gt;&#xA;&lt;p&gt;A few years ago, I started my journey into the tech world with curiosity and a deep desire to understand how things work. Over time, I realized that sharing knowledge is as fulfilling as gaining it. This blog is my way of contributing to the tech community, providing content that educates, inspires, and sparks innovation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I. Auto build &amp; push Docker Image to AWS ECR with Github Actions</title>
      <link>https://lamthanhnguyen.github.io/aws/ci-docker-to-aws-ecr-with-github-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/aws/ci-docker-to-aws-ecr-with-github-actions/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Automating the build and deployment of Docker images using GitHub Actions and AWS Elastic Container Registry (ECR) significantly streamlines your software delivery process.&lt;/p&gt;&#xA;&lt;p&gt;By integrating these powerful tools, developers benefit from reduced manual intervention, minimized errors, and accelerated deployment cycles.&lt;/p&gt;&#xA;&lt;p&gt;GitHub Actions automates your build workflow whenever code changes, while AWS ECR securely stores and manages your container images, ensuring reliability and scalability.&lt;/p&gt;&#xA;&lt;p&gt;In this guide, you&amp;rsquo;ll learn step-by-step how to effortlessly set up continuous integration and continuous deployment (CI/CD) to AWS ECR, maximizing your development efficiency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I. Concurrency and Parallelism In Golang And Python</title>
      <link>https://lamthanhnguyen.github.io/programming-language/concurrency-and-parallelism-in-golang-and-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/programming-language/concurrency-and-parallelism-in-golang-and-python/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1-introduction&#34;&gt;1. Introduction&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--why-concurrency-and-parallelism-matter&#34;&gt;Why concurrency and parallelism matter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--key-differences-between-concurrency-and-parallelism&#34;&gt;Key differences between concurrency and parallelism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-concurrency-in-golang&#34;&gt;2. Concurrency in Golang&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--goroutines&#34;&gt;Goroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--channels&#34;&gt;Channels&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3-concurrency-in-python&#34;&gt;3. Concurrency in Python&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--threads&#34;&gt;Threads&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--asyncio-concurrency-for-io-bound-work&#34;&gt;Asyncio: Concurrency for IO-bound Work&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-1&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4-parallelism-in-golang&#34;&gt;4. Parallelism in Golang&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#go-scheduler-the-g-m-p-model&#34;&gt;Go Scheduler: The G-M-P Model&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-2&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5-parallelism-in-python&#34;&gt;5. Parallelism in Python&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--the-gil-and-its-impact&#34;&gt;The GIL and Its Impact&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--multiprocessing-for-real-parallelism&#34;&gt;Multiprocessing for Real Parallelism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--example-code-3&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6-conclustion&#34;&gt;6. Conclustion&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h1&gt;&#xA;&lt;h2 id=&#34;--why-concurrency-and-parallelism-matter&#34;&gt;- Why concurrency and parallelism matter:&lt;/h2&gt;&#xA;&lt;p&gt;Modern software isn’t just about doing one thing at a time. From high-traffic web servers and real-time analytics, to background processing and automation, today’s applications often need to handle multiple tasks “at once.” Whether it’s serving thousands of user requests, processing large datasets, or running background jobs, your program’s ability to efficiently juggle several operations can be the difference between fast, scalable software and a sluggish, unresponsive system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I. Install AWS CLI, kubectl, and eksctl</title>
      <link>https://lamthanhnguyen.github.io/kubernetes/install-aws-kubectl-eksctl-on-ubuntu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/kubernetes/install-aws-kubectl-eksctl-on-ubuntu/</guid>
      <description>&lt;p&gt;Ubuntu 22.04.3 LTS - Windows Subsystem for Linux - AMD64&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-install--config-aws-cli&#34;&gt;1. Install &amp;amp; Config AWS CLI&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo snap install aws-cli --classic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;which aws&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Configure AWS account&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws configure&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AWS Access Key ID &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: xxxxxxxxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AWS Secret Access Key &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: xxxxxxxxxxxxxxxx+xxxxxx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Default region name &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: ap-southeast-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Default output format &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;None&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;: json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can verify your aws account:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.aws/credentials&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat ~/.aws/config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 describe-vpcs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-install-kubectl-cli&#34;&gt;2. Install kubectl CLI&lt;/h2&gt;&#xA;&lt;p&gt;kubectl is the command-line interface (CLI) tool used to interact with Kubernetes clusters. It allows developers and operators to manage cluster resources, inspect states, deploy applications, and perform administrative tasks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>II. Mastering TCP and UDP in Golang</title>
      <link>https://lamthanhnguyen.github.io/programming-language/mastering-tcp-udp-in-golang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/programming-language/mastering-tcp-udp-in-golang/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#1-introduction&#34;&gt;1. Introduction&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--why-understanding-networking-is-crucial-for-backend-developers&#34;&gt;Why understanding networking is crucial for backend developers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#--short-comparison-of-tcp-and-udp&#34;&gt;Short comparison of TCP and UDP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#2-deep-dive-into-tcp&#34;&gt;2. Deep Dive into TCP&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#21-when-to-use-tcp&#34;&gt;2.1. When to Use TCP?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#22-tcp-handshake-syn-syn-ack-ack&#34;&gt;2.2. TCP Handshake: SYN, SYN-ACK, ACK&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#23-error-handling--retransmission&#34;&gt;2.3. Error Handling &amp;amp; Retransmission&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#24-advantages--limitations-of-tcp&#34;&gt;2.4. Advantages &amp;amp; Limitations of TCP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#25-tcp-code-examples-in-golang&#34;&gt;2.5. TCP Code Examples in Golang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#3-deep-dive-into-udp&#34;&gt;3. Deep Dive into UDP&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#31-when-to-use-udp&#34;&gt;3.1. When to Use UDP?&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#32-stateless-communication-and-speed&#34;&gt;3.2. Stateless Communication and Speed&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#33-why-udp-doesnt-guarantee-delivery&#34;&gt;3.3. Why UDP Doesn’t Guarantee Delivery&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#34-advantages--limitations-of-udp&#34;&gt;3.4. Advantages &amp;amp; Limitations of UDP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#35-udp-code-examples-in-golang&#34;&gt;3.5. UDP Code Examples in Golang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#4-advanced-topics&#34;&gt;4. Advanced Topics&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#41-concurrent-tcp-and-udp-servers-using-goroutines&#34;&gt;4.1. Concurrent TCP and UDP Servers Using Goroutines&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#42-implementing-protocol-buffers-or-json-data-serialization-with-tcpudp&#34;&gt;4.2. Implementing Protocol Buffers or JSON Data Serialization with TCP/UDP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#43-handling-scalability-and-performance-tuning&#34;&gt;4.3. Handling Scalability and Performance Tuning&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#5-best-practices--common-pitfalls&#34;&gt;5. Best Practices &amp;amp; Common Pitfalls&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#51-resource-management-and-avoiding-memory-leaks&#34;&gt;5.1. Resource Management and Avoiding Memory Leaks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#52-handling-network-errors-gracefully&#34;&gt;5.2. Handling Network Errors Gracefully&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#53-security-considerations-in-networking&#34;&gt;5.3. Security Considerations in Networking&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#6-conclusion&#34;&gt;6. Conclusion&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#summary-of-key-learnings&#34;&gt;Summary of Key Learnings&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#guidance-for-choosing-tcp-vs-udp&#34;&gt;Guidance for Choosing TCP vs UDP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h1&gt;&#xA;&lt;h3 id=&#34;--why-understanding-networking-is-crucial-for-backend-developers&#34;&gt;- Why understanding networking is crucial for backend developers&lt;/h3&gt;&#xA;&lt;p&gt;In today’s connected world, backend developers are expected to build reliable, scalable, and high-performance systems. Whether you’re designing REST APIs, microservices, real-time chat apps, or distributed systems, a solid understanding of computer networking is essential. Knowing how data is transmitted, how connections are established, and what trade-offs exist between reliability and speed empowers you to make better architectural decisions and debug network issues effectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>II. Understanding Kubernetes Service Types &amp; Ingress</title>
      <link>https://lamthanhnguyen.github.io/kubernetes/kubernetes-service-types-and-ingress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://lamthanhnguyen.github.io/kubernetes/kubernetes-service-types-and-ingress/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Why exposing services matters in Kubernetes&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Your workloads are useless if no one can reach them. Service abstraction lets you decouple pod lifecycles from stable endpoints.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Overview of Service types vs. Ingress:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Services give every workload an IP; Ingress turns a set of Services into a coherent, externally reachable API surface.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2-kubernetes-service-types-explained&#34;&gt;2. Kubernetes Service Types Explained&lt;/h2&gt;&#xA;&lt;h3 id=&#34;a-clusterip&#34;&gt;a. ClusterIP&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Exposes the Service on a cluster-internal IP&#xA;- Accessible **only inside** the cluster&#xA;- Typical use: &#xA;    - Internal-only services &#xA;    - Microservices talking to each other&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;b-nodeport&#34;&gt;b. NodePort&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Exposes the Service on each node’s IP at a static port (the NodePort)&#xA;- Accessible from outside the cluster: same VPC or the internet (depending on firewall/Security Group rules)&#xA;- Reachable via **NodeIP:NodePort** (port range 30000 - 32767)&#xA;- Typical use:&#xA;    - Simple setups, debugging, or in environments without cloud LBs. &#xA;    - Quick test or direct access, not recommended for production internet-facing apps.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;c-loadbalancer&#34;&gt;c. LoadBalancer&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Creates a cloud load balancer (cloud provider integration, e.g., AWS ALB).&#xA;- Assigns a public IP and routes traffic to your Service.&#xA;- Accessible from the internet.&#xA;- Typical use: exposing production workloads to the internet (websites, APIs).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;d-externalname&#34;&gt;d. ExternalName&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;- Maps the Service to an external DNS name.&#xA;- Used for routing cluster traffic to resources outside Kubernetes.&#xA;- Not used for exposing services to the internet.&#xA;- Typical use: referencing services outside the cluster by DNS name(database,SaaS endpoints).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;3-ingress&#34;&gt;3. Ingress&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ingress is a Kubernetes resource that manages external HTTP/HTTPS traffic&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Receives incoming requests from outside the cluster&lt;/li&gt;&#xA;&lt;li&gt;Routes them to the right Service based on rules (URL path, host, headers…)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Typical flow: User → ALB/NLB/NGINX (provisioned by the Ingress Controller) → Service → Pods.&lt;/li&gt;&#xA;&lt;li&gt;Ingress Controller:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A pod/deployment running inside your cluster&lt;/li&gt;&#xA;&lt;li&gt;monitors your Ingress resources.&lt;/li&gt;&#xA;&lt;li&gt;configures and manages actual routing rules on a cloud load balancer&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Ingress Class:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a way to specify which Ingress Controller is responsible for handling a particular Ingress resource&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;4-curious-question&#34;&gt;4. Curious question&lt;/h2&gt;&#xA;&lt;p&gt;Q: Why Do You Need Ingress?&#xA;A: Without Ingress, to expose multiple applications or services externally, you would need many individual LoadBalancer services, which becomes expensive and complex quickly.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
